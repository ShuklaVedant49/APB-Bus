  ////////////////////////////
interface apb_if;
  
    logic pclk;
    logic psel;
    logic presetn;
    logic penable;
    logic [31:0]pwdata;                
    logic pwrite;                     
    logic [31:0] paddr;
    logic pready,pslverr;
    logic [31:0] prdata;
 
endinterface

//------------------------------------------------------------------------------------------------------//
//////////////////////////////
class transaction;
  
  typedef enum int { write=0,
  					 read=1,
					 random=2,
                     error=3
                   } opr_type;
   
  rand opr_type opr;
  rand bit [31:0] pwdata;
  rand bit [31:0] paddr;
  rand bit psel;
  rand bit penable;
  rand bit pwrite;
  rand bit pslverr;
  bit [31:0] prdata;
  bit pready;
  
  constraint my_add 
  {paddr > 1 ;paddr<5;}
  
  constraint my_datac
  {pwdata >1 ; pwdata <10;}
  
  //Making function for DISPLAY argument as string type
  function void display(input string tag);
    $display("[%0s] op:%0s  paddr:%0d pwdata:%0d psel:%0b penable:%0b pwrite:%0b prdata:%0d pready:%0b pslverr:%0b",tag,opr.name,paddr,pwdata,psel,penable,pwrite,prdata,pready,pslverr);
  endfunction
  
  //Making Deep function
  function transaction copy();
    copy=new();
    copy.opr=this.opr;
    copy.pwdata=this.pwdata;
    copy.paddr=this.paddr;
    copy.psel=this.psel;
    copy.penable=this.penable;
    copy.pwrite=this.pwrite;
    copy.pslverr=this.pslverr;
    copy.prdata=this.prdata;
    copy.pready=this.pready;
  endfunction
endclass
//////////////////////////////////

class generator;
  transaction tr;
  mailbox#(transaction) mbx;
  int count;
  event done;
  event nextdrv;
  event nextsco;
  
  
  function new(mailbox #(transaction) mbx);
    this.mbx=mbx;
    tr=new();
  endfunction
  
  task run();
    repeat (count)
      begin
        assert (tr.randomize()) else $error("Nai thayu kai");
        //mbx.put(tr);
        mbx.put(tr.copy());
        tr.display("GEN");
        @(nextsco);
        @(nextdrv);
      end
    ->done;
  endtask
endclass

//-------------------------------------------------------------------------------------------//
///////////////////////
//Looking for each and every operation how they are performed
class driver;
  
  virtual apb_if vif;
  transaction tr;
  generator gr;
  mailbox #(transaction) mbx;
  event nextdrv;
  
  function new(mailbox#(transaction) mbx);
    this.mbx=mbx;
  endfunction
  
  task reset();
    vif.presetn <= 1'b0;
    vif.psel    <= 1'b0;
    vif.pwdata	<= 0;
    vif.paddr 	<= 0;
    vif.pwrite	<=1'b0;
    repeat(5) @(posedge vif.pclk);
    vif.presetn <= 1'b0;
    repeat(5) @(posedge vif.pclk);
    $display("[DRV]:Reset Done");
  endtask
  
  task run();
    forever begin
      
      mbx.get(tr);
      
      if(tr.opr == 0) ///Performing writing operation
        begin
          @(posedge vif.pclk);
          //now at the very first clock edge transferring data but keeping penable low
          vif.psel <= 1'b1;
          vif.pwrite <= 1'b1;
          vif.paddr <= tr.paddr;
          vif.pwdata <=tr.pwdata;
          vif.penable <= 1'b0;
          vif.pwrite <= 1'b1;
          //Till now we were in setup state but now to go to acceess state
          //we have to make penabe ONE and pready one//
          //PLEASE CHECK WAVEFORM
          @(posedge vif.pclk);
          vif.penable <= 1'b1;
          vif.pready  <= 1'b1;
          ///Transaction complete now going back to idle State
          repeat(2) @(posedge vif.pclk);
          vif.psel<= 1'b0;
          vif.penable <= 1'b0;
          vif.pwrite <=1'b0;
          $display("[DRv WRITE]: Write Operation paddr:%0d pwdata:%0d",tr.paddr,tr.pwdata);
          end
      
      else if(tr.opr==1) // Performing Read Operation
        begin
          @(posedge vif.pclk);
          vif.psel <= 1'b1;
          vif.pwrite <= 1'b0;
          vif.paddr <= tr.paddr;
          vif.pwdata <=tr.pwdata;
          vif.penable <= 1'b0;
          @(posedge vif.pclk);
          vif.penable <= 1'b1;
          vif.pready  <= 1'b1;          
          ///Transaction complete now going back to idle State
          repeat(2) @(posedge vif.pclk);
          vif.psel<= 1'b0;
          vif.penable <= 1'b0;
          vif.pwrite <=1'b0;
          $display("[DRV READ]: Read Operation paddr:%0d pwdata:%0d",tr.paddr,tr.pwdata);
        end
      
      else if (tr.opr == 2) ///Performing Random operation
        begin
          @(posedge vif.pclk); // The random stimuli we generated we will be pasing directly to DUT
          //vif.psel <= 1'b1;
          vif.psel    <= tr.psel;
          vif.penable <= tr.penable;
          vif.paddr   <= tr.paddr;
          vif.pwdata  <= tr.pwdata;
          @(posedge vif.pclk);
          vif.penable <= 1'b1;
          ///Transaction complete now going back to idle State
          repeat(2) @(posedge vif.pclk);
          vif.psel<= 1'b0;
          vif.penable <= 1'b0;
          vif.pwrite <=1'b0;
          $display("[DRV Random]: Random Operation paddr:%0d pwdata:%0d",tr.paddr,tr.pwdata);
        end
      
      else if (tr.opr == 3)  //Injecting error in this design
        begin
          $display("[Not Working]");
        end
      
      ->nextdrv;
    end
  endtask
endclass

//--------------------------------------------------------------------------------------------------------//
///////////////////////////
//MONITOR cLASS
////////////////////////////
//NOW MONITOR WILL WAIT FOR RESPONSE FROM DUT AND SENT IT TO SCOREBOARD
//So monitor will monitor write and read operation and pass it to the scoreboard
///////////////////////////
class monitor;
  transaction tr;
  driver drv;
  
  // Instantiating the Interface using virtual interface 
  //calling out all the posrts availabe for the read and write operation
  virtual apb_if vif;
  mailbox #(transaction) mbx;
  
  function new(mailbox #(transaction) mbx);
    this.mbx=mbx;
  endfunction
  
  task run();
    tr=new();
    forever begin
      @(posedge vif.pclk);
      if (vif.psel && !vif.enable)
        begin
          @(posedge vif.pclk);
          ///Starting to pass write operation
          if(vif.psel && vif.pwrite && vif.penable)
            begin
              tr.pwdata = vif.pwdata;
              tr.paddr  = vif.paddr;
              tr.pwrite = vif.pwrite;
              $display("------------------------------------------------");
              $display("[MON DATA] PWDATA:%0d PADDR:%0d PWRITE:%0d",vif.pwdata, vif.paddr,vif.pwrite);
            end
          //Writing operation ends
          ///Starting writing operation
          else if (vif.psel && vif.pread && vif.penable)
            begin
              @(posedge vif.pclk);
              tr.pwdata = vif.pwdata;
              tr.paddr  = vif.paddr;
              tr.prdata  = vif.prdata;
              $display("[MON DATA] PWDATA:%0d PADDR:%0d PRDATA:%0d",vif.pwdata, vif.paddr,vif.prdata);
            end
          
          mbx.put(tr);
        end
    end
  endtask
endclass
//-----------------------------------------------------------------------------------//
//////// SCOREBOARD //////////////
//PURPOSE OF SCOREBOARD Is TO MAKE ITS OWN LOGIC ASSOCIATED
//WITH DESIGN AND TAKE THE VALUES RECEIVED FROM MONITOR CLASS DATA CONTAINER
class scoreboard;
  
  transaction tr;
  //Use this as a data container
  monitor mon;
  mailbox #(transaction) mbx;
  
  //To check data we have to make few signal locally in this class
  //bit [31:0] pwdata[12] = `{default:0};
  bit [31:0] pwdata[12];
  bit [31:0] rdata;
  int index;
  event nextsco;
  
  function new(mailbox #(transaction) mbx);
    this.mbx= mbx;
  endfunction
  
  task run();
    forever begin
      //Getting data from the monitor class 
      mbx.get(tr);
      $display("[SCO DATA]: Recived PWDATA:%0d PADDR:%0d PWRITE:%0d]",tr.pwdata,tr.paddr,tr.pwrite);
      if((tr.pwrite == 1'b1) && (tr.pslverr == 1'b0))
        begin
          pwdata[tr.paddr] = tr.pwdata;
          $display("[SCO]: pwdata:%0d paddr:%0d",tr.pwdata,tr.paddr);
        end
      else if((tr.pwrite == 1'b0) && (tr.pslverr == 1'b0))
        begin
          rdata = pwdata[tr.paddr];
          if (tr.prdata == rdata)
            $display("matched data");
          else
            $display("data not matched");
        end
      else if(tr.pslverr == 1'b1)
        begin
          $display("FAILED TRASACTION");
        end
      ->nextsco;
    end
  endtask
endclass
//-----------------------------------------------------------------------------//
///////////////////////////////////////
////////ENVIRONMENT/////////////////// 
class environment;
  
  //this will be used to connect different modules togetger
  //Two event and two mailbox required to complete this class
  // 1) Generator to Driver
  // 2) Monitor   to Scoreboard
  generator gr;
  driver drv;
  monitor mon;
  scoreboard sco;
  
  //Two EVENT  
  event gen_to_drv;
  event gen_to_sco;
  
  //TWO mailbox
  mailbox #(transaction) gdmbx;
  mailbox #(transaction) msmbx;
  
  //Instantiate interface
  virtual apb_if vif;
  
  
  function new(virtual apb_if vif);
    
    gdmbx = new();
    gr= new(gdmbx);
    drv= new(gdmbx);
    
    msmbx= new();
    mon = new(msmbx);
    sco= new(msmbx);
    
    this.vif= vif;
    drv.vif=this.vif;
    mon.vif=this.vif;
    
    
    /////////// ?????????????????????????????? ///////////////
    gr.nextsco = gen_to_sco;
    sco.nextsco = gen_to_sco;
    
    gr.nextdrv = gen_to_drv;
    drv.nextdrv = gen_to_drv;
    
  endfunction
  
  task pre_test();
    drv.reset();
  endtask
  
  task test();
  fork
    gr.run();
    drv.run();
    mon.run();
    sco.run();
  join_any
  endtask
  
  task post_test();
    wait(gr.done.triggered);  
    $finish();	
  endtask
  
  task run();
    pre_test();
    test();
    post_test();
  endtask 
endclass

//------------------------------------------
//////////////////////////////////////////
module test_bench;
  
    abp_if vif();
  environment env;
    
 
 apb_top dut (vif.presetn, vif.pclk, vif.psel, vif.penable, vif.pwrite, vif.paddr, vif.pwdata, vif.prdata, vif.pready,vif.pslverr);
   
    initial begin
      vif.pclk <= 0;
    end
    
    always #10 vif.pclk <= ~vif.pclk;
    
    initial begin
      env = new(vif);
      env.gr.count = 30;
      env.run();
    end
      
    
    initial begin
      $dumpfile("dump.vcd");
      $dumpvars;
    end
    
endmodule
