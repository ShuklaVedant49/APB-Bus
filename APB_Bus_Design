// Code your design here
module apb_top(
    input  pclk,
    input psel,
    input presetn,
    input penable,
    input [31:0]pwdata,               // This is Write data bus that will be used for data transfer
    input pwrite,                     // Make sure this is high while you are perfoming write operation.
    input [31:0] paddr,               // Adderess
    output  reg pready,pslverr,
    output  reg [31:0] prdata
);

reg [31:0] memory [32];

/*
parameter {setup= 2'b00,
          Access=2'b01,
          Access=2'b10,
          Transfer=2'b11};
*/
///////Definig the every state/////////         
  typedef enum{idle =0,
              setup=1,
              access=2,
              transfer=3
              }state_type;
         
  state_type state=idle;
  
  always @(posedge pclk)
    begin
        if(presetn==1'b0) //// Logic if we Presetn is activce everything will be low
          begin
            state<= idle;
            pready<=1'b0;
            prdata<=32'h00000000;
            pslverr<=0;
            
            for (int i=0;i<32;i++)
              begin
                memory[i]<=0;
              end
            end  
            
        else
          begin
           case(state)
             idle:
               begin
                 prdata<=32'h00000000;
                 pready<=1'b0;
                 
                 if((psel==1'b1) && (penable==1'b0))
                   begin
                     state<= setup;
                   end
               end 
               
             setup:    ///////Transfer logic 
               begin
                 if((psel==1'b1) && (penable==1'b0))
                   begin
                    if(paddr < 32) begin
                      state<=access;
                      pready<=1'b1;   /////////////Pready is high means we are ready for the transfer and you make sure 
                    end
                    
                    else
                      begin
                        state<=access;
                        pready<=1'b0;
                      end 
                    end
                 else
                  state<=setup;
               end                                          
             
             access:
               begin
                 if(psel && pwrite && penable)
                   begin
                    if(paddr < 32)
                      begin
                        memory[paddr] <= pwdata;
                        pslverr<=1'b0;
                      end
                      
                   else
                     begin
                       state<=transfer;
                       pready<=1'b1;
                       pslverr<=1'b1;
                     end
                   end
                   
                  else if(psel && !pwrite && penable)
                    begin
                      if(paddr < 32)
                        begin
                          prdata <= memory[paddr];
                          state <= transfer;
                          pready <= 1'b1;
                          pslverr <= 1'b0;
                       end
                     else 
                       begin
                         state <= transfer;
                         pready <= 1'b1;
                         pslverr <= 1'b1;
                         prdata <= 32'hxxxxxxxx;
                      end
                  end
                end
              
              transfer:
               begin
                 state <= setup;
                 pready <= 1'b0;
                 pslverr <= 1'b0;
              end      
                  
           default : state <= idle;
   
      endcase
      
    end
  end  
  
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars;
    #300;
  end
endmodule
////////////////////////////
